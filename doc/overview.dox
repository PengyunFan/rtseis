/*!
\mainpage RTSeis Documentation

\section section_Contents Contents

- \subpage page_overview "Overview"
- \subpage page_installation "Installing"
- \subpage page_utilities "Utilities"

*/

//--------------------------------------------------------------------------------------//

/*!
\page page_overview Overview
\section section_overview Overview

RTSeis is a real-time focused seismic signals processing library that is intended to

- Facilitate real-time seismic signals processing in a production environment.
- Increase the productivity of scientists at regional seismic networks by providing
convenient C++ and Python solutions with minimal sacrifice in performance.
- Emphasize data parallelism to achieve high-performance for processing of
Large-N datasets.

\subsection section_overview_history History

RTSeis is the offshoot of my time at <a href="http://www.isti.com/">ISTI</a> where
I'd frequently have to write holistic applications that were required do some generic
signals processing.  The generic part is the focus of this library where the goal is 
o help seismologists easily add a signals processing workflow to their seismological
application.

\subsection section_overview_alternatives Alternatives

There are a great many signals processing packages.  In general, RTSeis tries to
distinguish itself by

- Being accessible from a low-level compiled language and a high-level scripting
language; in this case C++ and Python, respectively.
- Focusing on the real-time component of signals processing.
- Achieving high performance on Intel 64-bit architectures.

These points are really driven by the target audience which are seismologists in
network operations or seismologists looking to process many signals.  To the latter,
realize that the bottleneck in processing will likely be accessing disk.

\subsection section_overview_limitations Limitations

RTSeis leverages libraries designed explicitly for x86_64 hardware.  In particular,
these libraries are tuned for Intel chips though AMD users will be okay.  
ARM and Power9 users will have to look elsewhere or reimplement a lot of low-level
stuff (which is actually doable because the API is hardware agnostic by design).

\subsection section_overview_obspy ObsPy

<a href="https://github.com/obspy/obspy/wiki">ObsPy</a> 
is a feature-rich platform for seismic processing with an easy-to-use Python
interface.  As ObsPy uses SciPy to implement many of its signals processing routines
it is, at the time of writing, limited in its real-time applications.  Additionally,
RTSeis's license does not involve a copyleft clause which may be advantageous for
those looking to create closed-source solutions.

\subsection section_overview_matlab Matlab

Matlab is a complete signals processing solution.  RTSeis does not even begin to
approach the breadth and depth of Matlab's functionality.  However, what RTSeis does 
provide a solution that doesn't require developers to have a Matlab license.

\section section_Acknowledgements Acknowledgements

*/

//--------------------------------------------------------------------------------------//

/*!
\page page_installation Installation
\section section_installation Installation
This section introduces a strategy to build the library from source.  First, the
dependencies will be introduced.  Next, Makefiles are generated by configuring CMake.
Following a successful CMake configruation, the software is built, tested, and
installed.

\subsection section_installation_prereqs Prerequisites

The following prerequisites must be satisfied prior to building the software
- A C++17 compliant compiler.
- <a href="https://git-scm.com/">git</a>
- <a href="https://cmake.org/">CMake</a> v3.6
- <a href="https://github.com/google/googletest">Google Test</a>
- <a href="https://software.intel.com/en-us/mkl">MKL</a> and
<a href="https://software.intel.com/en-us/intel-ipp">IPP</a> are both required.
They can be obtained using yum by following the directions
<a href="https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-yum-repo">here</a> 
or by using apt by following the directions
<a href="https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo">here</a>.

If the Python bindings are desired then the additional requirements to satisfy are
- <a href="https://www.python.org/download/releases/3.0/">Python3</a>
- <a href="https://github.com/pybind/pybind11">Pybind11</a>

In addition, the API documentation can be created locally with
- <a href="http://www.doxygen.nl/">Doxygen</a>

\subsection section_installation_config Configuration

After the prerequisites have been satisfied CMake can be configured by running a
script like the following in the root source directory

\verbatim

#!/bin/bash
export IPP_DIR=/opt/intel/ipp
export IPP_LIB_ROOT=${IPP_DIR}/lib/intel64
export MKL_DIR=/opt/intel/mkl
export MKL_LIB_ROOT=${MKL_DIR}/lib/intel64
export GTEST_ROOT=/usr/local
export BUILD_DIR=build
if [ -d ${BUILD_DIR} ]; then
   echo "Removing build directory" ${BUILD_DIR}
   rm -rf ${BUILD_DIR}
fi
mkdir ${BUILD_DIR}
cd ${BUILD_DIR}
cmake .. \
-DCMAKE_C_FLAGS="-g -Wall" \
-DCMAKE_CXX_FLAGS="-g -Wall" \
-DGTEST_INCLUDE_DIRS="/usr/local/include" \
-DGTEST_BOTH_LIBRARIES="/usr/local/lib/libgtest.a;/local/lib/libgtest_main.a" \
-DIPP_INCLUDE_DIR=${IPP_DIR}/include \
-DIPP_LIBRARY="${IPP_LIB_ROOT}/libipps.so;${IPP_LIB_ROOT}/libippvm.so;${IPP_LIB_ROOT}/libippcore.so" \
-DMKL_INCLUDE_DIR="${MKL_DIR}/include" \
-DMKL_LIBRARY="${MKL_LIB_ROOT}/libmkl_intel_lp64.so;${MKL_LIB_ROOT}/libmkl_sequential.so;${MKL_LIB_ROOT}/libmkl_core.so;${MKL_LIB_ROOT}/libmkl_avx2.so" \
-DRTSEIS_WRAP_PYTHON=YES \
-Dpybind11_INCLUDE_DIR="/usr/local/include/pybind11"
cd ..

\endverbatim

Notice, the RTSEIS_WRAP_PYTHON flag has been toggled on.  If the Python bindings
are not desired then you can simply remove the last two lines.

OSX users may be required to replaced the *.so with *.dylib.

\subsection section_installation_compile Compilation

RTSeis is now compiled by descending into the build directory, 
here named build, and issuing a make command

\verbatim
cd build
make
\endverbatim

\subsection section_installation_testing Testing

Prior to using the library it is recommended to verify that the salient 
components are in working order.  To do this, issue the following command
in the build directory

\verbatim
make test
\endverbatim

This should result in a summary indicating that all tests were passed.
Developers may require more information.  In this case, 

\verbatim
ctest --verbose
\endverbatim

is a useful alternative.

\subsection section_installation_install Installation

By this point RTSeis has been compiled and tested.  The library is installed
by issuing the following command in the build directory 

\verbatim
make install
\endverbatim

Note, the make install command need to be prefaced with sudo.

*/

//----------------------------------------------------------------------------//

/*!
\page page_utilities Utilities
\section section_Utilities Utilities

The utilities section of the library defines much of the functionality of the
library.  The goal of the utilities is to provide many low-level functions
and classes that can be reorganized into higher-level modules.

<table>
<caption id="Overview of RTSeis utilities">Utilities</caption>
<tr><th> Component <th> Description
<tr><td> RTSeis::Utilities::FilterRepresentations <td> Filter representations.
<tr><td> RTSeis::Utilities::FilterRepresentations::FIR <td> FIR Filter design.
<tr><td> RTSeis::Utilities::FilterDesign <td> Filter design utilities.
<tr><td> RTSeis::Utilities::FilterImplementations <td> Digital filter implementations.
<tr><td> RTSeis::Utilities::Transforms <td> Fourier transforms, Hilbert transforms, envelopes, and time-frequency analysis.
<tr><td> RTSeis::Utilities::Math::Convolve <td> Single channel convolution, correlation, and auto-correlation.
<tr><td> RTSeis::Utilities::Math::Polynomial <td> Polynomial manipulating functions.
</table> 

\defgroup rtseis_utils Utilities
\brief Herein lies much of the primitives on which the high-level
       processing modules are built.  This includes basic mathematical
       operations, filter design, filter implementations, and transform
       implementations. 
\copyright Ben Baker distributed under the MIT license.

  \defgroup rtseis_utils_fr Filter Representations
  \brief Different representations of filters.  
  \ingroup rtseis_utils

  \defgroup rtseis_utils_filterDesign Filter Design
  \brief Utility functions for FIR and IIR filter design.
  \ingroup rtseis_utils
  
    \defgroup rtseis_utils_design_iir IIR Design
    \brief Utility functions for IIR filter design.
    \copyright Ben Baker distributed under the MIT license.
    \ingroup rtseis_utils_filterDesign

    \defgroup rtseis_utils_design_fir FIR Design
    \brief Utility functions for window-based FIR filter design.
    \copyright Ben Baker distributed under the MIT license.
    \ingroup rtseis_utils_filterDesign

    \defgroup rtseis_utils_design_response Response
    \brief Utility functions for analyzing the response of a filter.
    \copyright Ben Baker distributed under the MIT license.
    \ingroup rtseis_utils_filterDesign

  \defgroup rtseis_utils_math Math Utilities
  \brief Utility functions for performing common mathematical operations.
  \ingroup rtseis_utils

    \defgroup rtseis_utils_math_polynomial Polynomial
    \brief Utility functions for polynomial handling.
    \copyright Ben Baker distributed under the MIT license.
    \ingroup rtseis_utils_math

    \defgroup rtseis_utils_math_interpolation Interpolation
    \brief Utility functions for interpolation.
    \copyright Ben BAker distributed under the MIT license.
    \ingroup rtseis_utils_math

  \defgroup rtseis_utils_transforms Transforms
  \brief These are utilities that enable users to transform data
         between domains.  Found here are building blocks for Fourier
         and Hilbert transforms.
  \copyright Ben Baker distributed under the MIT license.
  \ingroup rtseis_utils_math

*/
