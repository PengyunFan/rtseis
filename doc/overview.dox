/*!
\mainpage RTSeis Documentation

\section section_Contents Contents

- \subpage page_overview "Overview"
- \subpage page_installation "Installing"
- \subpage page_utilities "Utilities"

*/

//--------------------------------------------------------------------------------------//

/*!
\page page_overview Overview
\section section_overview Overview

RTSeis is a real-time focused seismic signals processing library that is intended to

- Facilitate real-time seismic signals processing in a production environment.
- Increase the productivity of scientists at regional seismic networks by providing
convenient C++ and Python solutions with minimal sacrifice in performance.
- Emphasize data parallelism to achieve high-performance for processing of
Large-N datasets.

\subsection section_overview_history History

RTSeis is the offshoot of my time at <a href="http://www.isti.com/">ISTI</a> where
I'd frequently have to write holistic applications that were required do some generic
signals processing.  The generic part is the focus of this library where the goal is 
o help seismologists easily add a signals processing workflow to their seismological
application.

\subsection section_overview_alternatives Alternatives

There are a great many signals processing packages.  In general, RTSeis tries to
distinguish itself by

- Being accessible from a low-level compiled language and a high-level scripting
language; in this case C++ and Python, respectively.
- Focusing on the real-time component of signals processing.
- Achieving high performance on Intel 64-bit architectures.

These points are really driven by the target audience which are seismologists in
network operations or seismologists looking to process many signals.  To the latter,
realize that the bottleneck in processing will likely be accessing disk.

\subsection section_overview_limitations Limitations

RTSeis leverages libraries designed explicitly for x86_64 hardware.  In particular,
these libraries are tuned for Intel chips though AMD users will be okay.  
ARM and Power9 users will have to look elsewhere or reimplement a lot of low-level
stuff (which is actually doable because the API is hardware agnostic by design).

\subsection section_overview_obspy ObsPy

<a href="https://github.com/obspy/obspy/wiki">ObsPy</a> 
is a feature-rich platform for seismic processing with an easy-to-use Python
interface.  As ObsPy uses SciPy to implement many of its signals processing routines
it is, at the time of writing, limited in its real-time applications.  Additionally,
RTSeis's license does not involve a copyleft clause which may be advantageous for
those looking to create closed-source solutions.

\subsection section_overview_matlab Matlab

Matlab is a complete signals processing solution.  RTSeis does not even begin to
approach the breadth and depth of Matlab's functionality.  However, what RTSeis does 
provide a solution that doesn't require developers to have a Matlab license.

\section section_Acknowledgements Acknowledgements


*/

//--------------------------------------------------------------------------------------//

/*!
\page page_installation Installation
\section section_installation Installation
This section introduces a strategy to build the library from source.  First, the
dependencies will be introduced.  Then CMake can be configured which upon successful
completion will generate a Makefile that is appropriate for your environement.  
Following a successful configruation, the software can be built, tested, and installed.

\subsection section_installation_prereqs Prerequisites

The following prerequisites must be satisfied prior to building the software
- A C++14 compliant compiler.
- <a href="https://git-scm.com/">git</a>
- <a href="https://cmake.org/">CMake</a> v3.6
- <a href="https://software.intel.com/en-us/mkl">MKL</a> and 
<a href="https://software.intel.com/en-us/intel-ipp">IPP</a> are both required.
They can be obtained using yum by following the directions
<a href="https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-yum-repo">here</a> 
or by using apt by following the directions
<a href="https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo">here</a>.

If the Python bindings are desired then the additional requirements to satisfy are
- <a href="https://www.python.org/download/releases/3.0/">Python3</a>
- <a href="https://github.com/pybind/pybind11">Pybind11</a>

In addition, the API documentation can be created locally with
- <a href="http://www.doxygen.nl/">Doxygen</a>

\subsection section_installation_config Configuration

After the prerequisites have been satisfied CMake can be configured by running a
script like the following in the root source directory

\verbatim

#!/bin/sh
export IPP_DIR=/opt/intel/ipp
export IPP_LIB_ROOT=${IPP_DIR}/lib/intel64
export MKL_DIR=/opt/intel/mkl
export MKL_LIB_ROOT=${MKL_DIR}/lib/intel64
export BUILD_DIR=build
if [ -d ${BUILD_DIR} ]; then
   echo "Removing build directory" ${BUILD_DIR}
   rm -rf ${BUILD_DIR}
fi
mkdir ${BUILD_DIR}
cd ${BUILD_DIR}
cmake .. \
-DCMAKE_C_FLAGS="-g3 -O2 -Wall" \
-DCMAKE_CXX_FLAGS="-g3 -O2 -Wall" \
-DIPP_INCLUDE_DIR=${IPP_DIR}/include \
-DIPP_LIBRARY="${IPP_LIB_ROOT}/libipps.so;${IPP_LIB_ROOT}/libippvm.so;${IPP_LIB_ROOT}/libippcore.so" \
-DMKL_INCLUDE_DIR="${MKL_DIR}/include" \
-DMKL_LIBRARY="${MKL_LIB_ROOT}/libmkl_intel_lp64.so;${MKL_LIB_ROOT}/libmkl_sequential.so;${MKL_LIB_ROOT}/libmkl_core.so;${MKL_LIB_ROOT}/libmkl_avx2.so" \
-DRTSEIS_WRAP_PYTHON=YES \
-Dpybind11_INCLUDE_DIR="/usr/local/include/pybind11"
cd ..

\endverbatim

Notice, the RTSEIS_WRAP_PYTHON flag has been toggled on.  If the Python bindings
are not desired then you can simply remove the last two lines.

After successfully configuring then one can build the code by descending into the source directory

*/
